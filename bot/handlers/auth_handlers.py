from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from bot.services import api_client
from bot.states import session_manager
from conversation_states import LOGIN_EMAIL, LOGIN_PASSWORD, REGISTER_FULL_NAME, REGISTER_EMAIL, REGISTER_PASSWORD
from bot.utils.helpers import handle_api_error
from bot.handlers.menu import show_menu

async def start_login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return LOGIN_EMAIL

async def received_email_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    session_manager.set_session_data(user_id, "email_attempt", update.message.text)
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def received_password_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    email = session_manager.get_session_data(user_id, "email_attempt")
    password = update.message.text

    result = api_client.login_user(email, password)

    if result.get("success"):
        user_data = result.get("data", {})
        session_manager.set_session_data(user_id, "user", user_data)
        session_manager.set_session_data(user_id, "cookies", result.get("cookies"))
        session_manager.clear_session_data(user_id, "email_attempt")
        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, {user_data.get('fullName', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!")
        await show_menu(update, context)
    else:
        session_manager.clear_entire_session(user_id)
        await handle_api_error(update, result, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def cancel_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    session_manager.clear_session_data(update.effective_user.id, "email_attempt")
    await update.message.reply_text("‚ùé –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
    await show_menu(update, context) # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    return ConversationHandler.END

async def start_register_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    return REGISTER_FULL_NAME

async def received_fullname_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    session_manager.set_session_data(update.effective_user.id, "fullName_reg", update.message.text)
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return REGISTER_EMAIL

async def received_email_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    session_manager.set_session_data(update.effective_user.id, "email_reg", update.message.text)
    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    return REGISTER_PASSWORD

async def received_password_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    password = update.message.text
    fullName = session_manager.get_session_data(user_id, "fullName_reg")
    email = session_manager.get_session_data(user_id, "email_reg")

    if len(password) < 6:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return REGISTER_PASSWORD

    result = api_client.register_user(fullName, email, password)

    if result.get("success"):
        user_data = result.get("data", {})
        session_manager.set_session_data(user_id, "user", user_data)
        session_manager.set_session_data(user_id, "cookies", result.get("cookies"))
        await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {user_data.get('fullName', '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!")
        await show_menu(update, context)
    else:
        await handle_api_error(update, result, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        session_manager.clear_entire_session(user_id)

    session_manager.clear_session_data(user_id, "fullName_reg")
    session_manager.clear_session_data(user_id, "email_reg")
    return ConversationHandler.END

async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    session_manager.clear_session_data(user_id, "fullName_reg")
    session_manager.clear_session_data(user_id, "email_reg")
    await update.message.reply_text("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await show_menu(update, context)
    return ConversationHandler.END

async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cookies = session_manager.get_cookies(user_id)

    if not cookies:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        await show_menu(update, context)
        return

    result = api_client.logout_user(cookies)

    if result.get("success"):
        session_manager.clear_entire_session(user_id)
        await update.message.reply_text("üö™ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    else:
        session_manager.clear_entire_session(user_id)
        await handle_api_error(update, result, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞.")
    await show_menu(update, context)